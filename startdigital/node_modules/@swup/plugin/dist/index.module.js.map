{"version":3,"file":"index.module.js","sources":["../src/versionSatisfies.ts","../src/index.ts","../src/pluginRequirements.ts"],"sourcesContent":["type Comparator = '>' | '>=' | '<' | '<=';\n\n// Fill versions to exactly 3 decimals\nconst normalizeVersion = (version: string): string => {\n\treturn String(version).split('.').concat(['0', '0']).slice(0, 3).join('.');\n};\n\n// Numerically compare version strings after normalizing them\nconst compareVersion = (a: string, b: string): number => {\n\ta = normalizeVersion(a);\n\tb = normalizeVersion(b);\n\treturn a.localeCompare(b, undefined, { numeric: true });\n};\n\n// Apply a comparator (equals, greater-than, etc) by its symbol to a sort comparison\nconst applyComparator = (comparisonResult: number, comparator: Comparator) => {\n\tconst comparators = {\n\t\t'': (r: number) => r === 0,\n\t\t'>': (r: number) => r > 0,\n\t\t'>=': (r: number) => r >= 0,\n\t\t'<': (r: number) => r < 0,\n\t\t'<=': (r: number) => r <= 0\n\t};\n\tconst comparatorFn = comparators[comparator] || comparators[''];\n\treturn comparatorFn(comparisonResult);\n};\n\n/**\n * Check if a version satisfies all given version requirements\n *\n * versionSatisfies('2.1.0', ['>=2', '<4']) // true\n * versionSatisfies('2.1.0', ['5']) // false\n *\n * @param {string} installed Installed version\n * @param {Array.<string>} requirements Array of requirements that must be satisfied\n * @returns boolean\n */\nexport const versionSatisfies = (installed: string, requirements: string[]) => {\n\treturn requirements.every((required) => {\n\t\tconst [, comparator, version] = required.match(/^([\\D]+)?(.*)$/) || [];\n\t\tconst comparisonResult = compareVersion(installed, version);\n\t\treturn applyComparator(comparisonResult, (comparator as Comparator) || '>=');\n\t});\n};\n","import Swup from 'swup';\nimport type { Plugin as PluginType } from 'swup';\nimport { checkDependencyVersion } from \"./pluginRequirements\";\n\nexport type { PluginType };\n\n// omitting name as we don't want to define it here,\n// it must be defined in the extended class of the plugin\n// and so the type will say the same when omitting here\n// and forces the plugin author to define name on their side\nexport default class Plugin implements Omit<PluginType, 'name'> {\n\t// Identify as swup plugin created by extending this class\n\tisSwupPlugin = true as const;\n\n\t// Specify the version of swup that is required to use this plugin\n\t// e.g. requires = { swup: '>=3.0' }\n\trequires = {};\n\n\t// Swup instance, assigned by swup itself\n\tswup: Swup;\n\n\t// Version, not in use\n\tversion: string | undefined;\n\n\tmount() {\n\t\t// this is mount method rewritten by class extending\n\t\t// and is executed when swup is enabled with plugin\n\t}\n\n\tunmount() {\n\t\t// this is unmount method rewritten by class extending\n\t\t// and is executed when swup with plugin is disabled\n\t}\n\n\t_beforeMount() {\n\t\t// @ts-ignore name is always defined by extending the Plugin class\n\t\tif (!this.name) {\n\t\t\tthrow new Error('You must define a name of plugin when creating a class.')\n\t\t}\n\t}\n\n\t_afterUnmount() {\n\t\t// here for any future hidden auto-cleanup\n\t}\n\n\t_checkRequirements() {\n\t\tif (typeof this.requires !== 'object') {\n\t\t\treturn true;\n\t\t}\n\n\t\tObject.entries(this.requires).forEach(([dependency, versions]) => {\n\t\t\tversions = Array.isArray(versions) ? versions : [versions];\n\t\t\tif (!checkDependencyVersion(dependency, versions, this.swup)) {\n\t\t\t\tconst requirement = `${dependency} ${versions.join(', ')}`;\n\t\t\t\t// @ts-ignore name is always defined by extending the Plugin class\n\t\t\t\tthrow new Error(`Plugin version mismatch: ${this.name} requires ${requirement}`);\n\t\t\t}\n\t\t});\n\n\t\treturn true;\n\t}\n}\n","import Swup from 'swup';\n\nimport { versionSatisfies } from './versionSatisfies';\n\nfunction getInstalledDependencyVersion(dependency: string, swup: Swup): string {\n\tif (dependency === 'swup') {\n\t\treturn swup.version ?? '';\n\t} else {\n\t\t// Circular type dependency?\n\t\t// findPlugin returns swup's Plugin type which is not up-to-date\n\t\t// with the actual Plugin type from index.ts\n\t\tconst plugin = swup.findPlugin(dependency);\n\t\treturn plugin?.version ?? '';\n\t}\n}\n\nexport function checkDependencyVersion(\n\tdependency: string,\n\trequirements: string[],\n\tswup: Swup\n): boolean {\n\tconst version = getInstalledDependencyVersion(dependency, swup);\n\tif (version) {\n\t\treturn versionSatisfies(version, requirements);\n\t} else {\n\t\treturn false;\n\t}\n}\n"],"names":["normalizeVersion","version","String","split","concat","slice","join","Plugin","isSwupPlugin","requires","swup","mount","unmount","_beforeMount","this","name","_afterUnmount","_checkRequirements","Object","entries","forEach","_ref","dependency","versions","Array","isArray","checkDependencyVersion","requirements","findPlugin","getInstalledDependencyVersion","installed","every","required","comparator","match","a","b","comparisonResult","comparators","r","applyComparator","localeCompare","undefined","numeric","versionSatisfies","requirement","Error"],"mappings":"AAGA,MAAMA,EAAoBC,GAClBC,OAAOD,GAASE,MAAM,KAAKC,OAAO,CAAC,IAAK,MAAMC,MAAM,EAAG,GAAGC,KAAK,KCMlDC,MAAAA,EAEpBC,cAAAA,KAAAA,cAAe,EAIfC,KAAAA,SAAW,CAAA,EAGXC,KAAAA,UAGAT,EAAAA,KAAAA,aAEAU,CAAAA,CAAAA,QAAK,CAKLC,UAAO,CAKPC,eAEC,IAAKC,KAAKC,KACT,MAAM,UAAU,0DAElB,CAEAC,gBAAa,CAIbC,qBACC,MAA6B,iBAAdH,KAACL,UAIhBS,OAAOC,QAAQL,KAAKL,UAAUW,QAAQC,IAA2B,IAAzBC,EAAYC,GACnDA,EACA,GADAA,EAAWC,MAAMC,QAAQF,GAAYA,EAAW,CAACA,ICnCpCG,SACfJ,EACAK,EACAjB,GAEA,MAAaT,EAjBd,SAAuCqB,EAAoBZ,GAC1D,MAAmB,SAAfY,EACQZ,EAACT,SAAW,GAKRS,EAAKkB,WAAWN,IAChBrB,SAAW,EAE5B,CAOiB4B,CAA8BP,EAAYZ,GAC1D,QAAIT,GFe2B,EAAC6B,EAAmBH,IAChCA,EAACI,MAAOC,IAC1B,MAAM,CAAGC,EAAYhC,GAAW+B,EAASE,MAAM,mBAAqB,GA/B/C,IAACC,EAAWC,EAiCjC,MA1BsB,EAACC,EAA0BJ,KAClD,MAAMK,EAAc,CACnB,GAAKC,GAAoB,IAANA,EACnB,IAAMA,GAAcA,EAAI,EACxB,KAAOA,GAAcA,GAAK,EAC1B,IAAMA,GAAcA,EAAI,EACxB,KAAOA,GAAcA,GAAK,GAG3B,OADqBD,EAAYL,IAAeK,EAAY,KACxCD,EAAgB,EAiB5BG,EAjC0BJ,EAgCkBnC,EA/BpDkC,EAAInC,EADmBmC,EAgCkBL,GA9BzCM,EAAIpC,EAAiBoC,GACdD,EAAEM,cAAcL,OAAGM,EAAW,CAAEC,SAAS,KA8BLV,GAA6B,KAAI,GElBpDW,CAAC3C,EAAS0B,EAInC,CDyBQD,CAAuBJ,EAAYC,EAAUT,KAAKJ,MAAO,CAC7D,MAAMmC,EAAiB,GAAAvB,KAAcC,EAASjB,KAAK,QAEnD,MAAUwC,IAAAA,MAAkC,4BAAAhC,KAAKC,iBAAiB8B,IAClE,KATM,CAaT"}